def repository = [
        jitpack: 'https://jitpack.io',
]

ext.addRepos = { RepositoryHandler handler ->
    handler.google()
    handler.jcenter()
    handler.mavenCentral()
    handler.maven { url repository.jitpack }
}

ext.app = [
        minSdk     : 23,
        targetSdk  : 32,
        compileSdk : 32,
        versionCode: 1,
        versionName: '1.0.0',
]

ext.javaVersion = JavaVersion.VERSION_11

ext.versions = [
        gradlePlugin                 : '7.1.2',
        kotlin                       : '1.6.10',
        ktx                          : '1.7.0',

        appCompat                    : '1.4.1',
        material                     : '1.6.0-alpha03',
        constraintlayout             : '2.1.3',
        viewpager2                   : '1.1.0-beta01',

        compose                      : '1.1.1',

        navigation                   : '2.4.1',

        dagger                       : '2.41',

        coroutines                   : '1.6.4',

        retrofit                     : '2.9.0',

        okhttp                       : '5.0.0-alpha.5',

        moshi                        : '1.13.0',

        glide                        : '4.13.1',

        timber                       : '5.0.1',

        firebase                     : '4.3.13',

        firebase_database            : '20.0.6',

        fragment                     : '1.4.1',

        splash_screen                : '1.0.0-beta02',

        secrets_gradle_plugin_version: '2.0.1',

        play_services_maps           : '18.1.0',

        maps_utils_version           : '3.0.0',
        lifecycle_version            : '2.5.1',

        firebase_auth_version        : '21.1.0',


]

def dependencies = [
        gradle               : classpath("com.android.tools.build:gradle:${versions.gradlePlugin}"),

        maps_utils           : implementation("com.google.maps.android:maps-utils-ktx:${versions.maps_utils_version}"),

        maps_ktx             : implementation("com.google.maps.android:maps-ktx:${versions.maps_utils_version}"),

        secrets_gradle_plugin: classpath("com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:${versions.secrets_gradle_plugin_version}"),

        play_services_maps   : implementation("com.google.android.gms:play-services-maps:${versions.play_services_maps}"),

        lifecycle_viewmodel  : implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle_version}"),

        lifecycle_runtime    : implementation("androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle_version}"),

        kotlin               : [
                plugin: classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"),
                stdLib: implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"),
                ktx   : implementation("androidx.core:core-ktx:${versions.ktx}"),
        ],

        firebase             : classpath("com.google.gms:google-services:${versions.firebase}"),

        firebase_database    : implementation("com.google.firebase:firebase-database-ktx:${versions.firebase_database}"),
        firebase_storage     : implementation("com.google.firebase:firebase-storage-ktx:20.0.2"),


        android              : [
                appCompat       : implementation("androidx.appcompat:appcompat:${versions.appCompat}"),
                material        : implementation("com.google.android.material:material:${versions.material}"),
                constraintLayout: implementation("androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"),
                viewpager2      : implementation("androidx.viewpager2:viewpager2:${versions.viewpager2}"),
        ],

        compose              : [
                material: implementation("androidx.compose.material:material:${versions.compose}"),
                livedata: implementation("androidx.compose.runtime:runtime-livedata:${versions.compose}"),
        ],

        navigation           : [
                safeArgs: classpath("androidx.navigation:navigation-safe-args-gradle-plugin:${versions.navigation}"),
                fragment: implementation("androidx.navigation:navigation-fragment-ktx:${versions.navigation}"),
                ui      : implementation("androidx.navigation:navigation-ui-ktx:${versions.navigation}"),

        ],

        dagger               : [
                plugin  : classpath("com.google.dagger:hilt-android-gradle-plugin:${versions.dagger}"),
                hilt    : implementation("com.google.dagger:hilt-android:${versions.dagger}"),
                compiler: kapt("com.google.dagger:hilt-android-compiler:${versions.dagger}"),
        ],

        coroutines           : [
                core   : implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"),
                android: implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"),
        ],

        retrofit             : [
                retrofit      : implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}"),
                moshiConverter: implementation("com.squareup.retrofit2:converter-moshi:${versions.retrofit}"),
        ],

        okhttp               : [
                client: implementation("com.squareup.okhttp3:okhttp:${versions.okhttp}"),
                logger: implementation("com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"),
        ],

        moshi                : [
                core   : implementation("com.squareup.moshi:moshi-kotlin:${versions.moshi}"),
                codegen: kapt("com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"),
        ],

        glide                : [
                core    : implementation("com.github.bumptech.glide:glide:${versions.glide}"),
                compiler: kapt("com.github.bumptech.glide:compiler:${versions.glide}"),
        ],

        timber               : api("com.jakewharton.timber:timber:${versions.timber}"),

        fragment             : implementation("androidx.fragment:fragment-ktx:${versions.fragment}"),

        splash_screen        : implementation("androidx.core:core-splashscreen:${versions.splash_screen}"),

        firebase_auth        : implementation("com.google.firebase:firebase-auth-ktx:${versions.firebase_auth_version}"),


]

ext.rootDependencies = [
        dependencies.gradle,
        dependencies.kotlin.plugin,
        dependencies.dagger.plugin,
        dependencies.navigation.safeArgs,
        dependencies.firebase,
        dependencies.secrets_gradle_plugin,

]

ext.presentationDependencies = [
        dependencies.kotlin.stdLib,
        dependencies.kotlin.ktx,
        dependencies.android,
        dependencies.compose,
        dependencies.navigation.fragment,
        dependencies.navigation.ui,
        dependencies.dagger.hilt,
        dependencies.dagger.compiler,
        dependencies.glide,
        dependencies.fragment,
        dependencies.firebase_storage,
        dependencies.splash_screen,
        dependencies.play_services_maps,
        dependencies.maps_utils,
        dependencies.maps_ktx,
        dependencies.lifecycle_viewmodel,
        dependencies.lifecycle_runtime,
        dependencies.firebase_auth

]

ext.domainDependencies = [
        dependencies.kotlin.stdLib,
        dependencies.kotlin.ktx,
        dependencies.dagger.hilt,
        dependencies.dagger.compiler,
        dependencies.coroutines,
        dependencies.firebase_auth

]

ext.dataDependencies = [
        dependencies.kotlin.stdLib,
        dependencies.kotlin.ktx,
        dependencies.dagger.hilt,
        dependencies.dagger.compiler,
        dependencies.coroutines,
        dependencies.retrofit,
        dependencies.okhttp,
        dependencies.moshi,
        dependencies.firebase_database,
        dependencies.firebase_storage,
        dependencies.firebase_auth

]

ext.utilDependencies = [
        dependencies.kotlin.stdLib,
        dependencies.kotlin.ktx,
        dependencies.timber,
        dependencies.coroutines,
]

ext.addDependencies = { DependencyHandler handler, dependencyArray ->
    getDependencies(dependencyArray).each {
        handler.add(it.config, it.notation)
    }
}

static def getDependencies(holder) {
    def dependencies = new ArrayList<Dependency>()

    if (holder instanceof Dependency) {
        dependencies.add(holder)
    } else if (holder instanceof Map) {
        holder.values().each {
            dependencies.addAll(getDependencies(it))
        }
    } else if (holder instanceof List) {
        holder.each {
            dependencies.addAll(getDependencies(it))
        }
    }

    return dependencies
}

static def classpath(notation) {
    new Dependency('classpath', notation)
}

static def implementation(notation) {
    new Dependency('implementation', notation)
}

static def kapt(notation) {
    new Dependency('kapt', notation)
}

static def api(notation) {
    new Dependency('api', notation)
}

class Dependency {
    def config
    def notation

    Dependency(config, notation) {
        this.config = config
        this.notation = notation
    }
}
